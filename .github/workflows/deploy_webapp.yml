name: Deploy to Vercel

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore SOLIDapp/SOLIDapp.Web/SOLIDapp.Web.csproj

      - name: Publish Blazor WASM
        run: dotnet publish SOLIDapp/SOLIDapp.Web/SOLIDapp.Web.csproj -c Release -o build

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Create Vercel project (CLI, idempotent)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          PROJECT_NAME: ${{ github.event.repository.name }}
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "VERCEL_TOKEN not set; skipping project creation."
            exit 0
          fi
          # Normalize project name: lowercase, replace invalid chars, collapse hyphens, trim, truncate to 100 chars
          NORMALIZED=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g' | sed -E 's/-+/-/g' | sed -E 's/^-|-$//g')
          PROJECT_NAME=$(echo "$NORMALIZED" | cut -c1-100)
          echo "Ensuring Vercel project exists: $PROJECT_NAME"
          if [ -n "$VERCEL_ORG_ID" ]; then
            # --team is deprecated; use --scope and use --confirm to skip prompts
            vercel projects add "$PROJECT_NAME" --scope "$VERCEL_ORG_ID" --token "$VERCEL_TOKEN" || echo "Project may already exist; continuing..."
          else
            vercel projects add "$PROJECT_NAME" --token "$VERCEL_TOKEN" || echo "Project may already exist; continuing..."
          fi

      - name: Get Vercel Project ID
        id: get_project_id
        shell: bash
        run: |
          # Reemplaza con el nombre de tu proyecto
          PROJECT_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')
          echo "Project Name: $PROJECT_NAME"
          # Listar proyectos en la organizaciÃ³n y filtrar por nombre
          PROJECTS_JSON=$(vercel projects ls --token ${{ secrets.VERCEL_TOKEN }} --json)
          echo "Projects JSON: $PROJECTS_JSON"
          PROJECT_ID=$(echo $PROJECTS_JSON | jq -r '.projects[] | select(.name == "labsolid02") | .id')
          PROJECTID=$(echo $PROJECTS_JSON | jq -r '.projects[] | select(.name == "$PROJECT_NAME") | .id')
          # PROJECT_ID=$( cat projects.json | jq -r --arg PROJECT_NAME "$PROJECT_NAME" '.[] | select(.name == $PROJECT_NAME) | .id')
          # PROJECT_ID=$(echo $PROJECTS_JSON | jq -r --arg PROJECT_NAME "$PROJECT_NAME" '.projects[] | select(.name == $PROJECT_NAME) | .id')
          # Mostrar el Project ID
          echo "Project ID: $PROJECT_ID"
          echo "ProjectID: $PROJECTID"
          # Guardar el Project ID como un output
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ steps.get_project_id.outputs.project_id }}
          PROJECT_NAME: ${{ github.event.repository.name }}
        run: |
          # Deploy (prefer --confirm, pass --scope if provided). Some older CLI versions accept different flags.
          if [ -n "$VERCEL_ORG_ID" ]; then
            vercel --yes --token "$VERCEL_TOKEN" --cwd build/wwwroot --prod --scope "$VERCEL_ORG_ID" --name "$PROJECT_NAME"
          else
            vercel --yes --token "$VERCEL_TOKEN" --cwd build/wwwroot --prod --name "$PROJECT_NAME"
          fi
