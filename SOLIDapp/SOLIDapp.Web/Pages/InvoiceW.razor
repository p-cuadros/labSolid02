@page "/invoice"
@using SOLIDapp.Domain.WithPrinciple

<h3>Invoice - Demo de descuentos</h3>

<div class="mb-3">
  <label>Monto:</label>
  <input type="number" step="0.01" value="@amount" @oninput="OnAmountChanged" class="form-control" />
</div>

<div class="mb-3">
  <label>Tipo de Invoice:</label>
  <select class="form-select" @onchange="OnTypeChanged">
    <option value="">-- Seleccionar tipo --</option>
    <option value="Base">Invoice base</option>
    <option value="Final">FinalInvoice</option>
    <option value="Proposed">ProposedInvoice</option>
    <option value="Recurring">RecurringInvoice</option>
  </select>
</div>

<div class="mb-3">
  <button class="btn btn-secondary" @onclick="Reset">Limpiar</button>
</div>

@if (invoice is not null)
{
  <div class="mt-3">
    <p><strong>Tipo:</strong> @invoice.GetType().Name</p>
    <p><strong>Monto original:</strong> @amount.ToString("0.##")</p>
    <p><strong>Monto con descuento:</strong> @discounted.ToString("0.##")</p>
  </div>
}

@code {
  private double amount = 10000;
  private Invoice? invoice;
  private double discounted = 0;
  private InvoiceKind? selectedKind;

  private enum InvoiceKind
  {
    Base,
    Final,
    Proposed,
    Recurring
  }

  private bool HasInvoice => invoice is not null;

  Invoice BuildInvoice(InvoiceKind kind)
  {
    return kind switch
    {
      InvoiceKind.Base => new Invoice(),
      InvoiceKind.Final => new FinalInvoice(),
      InvoiceKind.Proposed => new ProposedInvoice(),
      InvoiceKind.Recurring => new RecurringInvoice(),
      _ => new Invoice()
    };
  }

  void OnTypeChanged(ChangeEventArgs e)
  {
    var s = e?.Value?.ToString() ?? string.Empty;
    if (Enum.TryParse<InvoiceKind>(s, ignoreCase: true, out var kind))
    {
      selectedKind = kind;
      invoice = BuildInvoice(kind);
      // aplicar descuento inmediatamente
      ApplyDiscount();
    }
    else
    {
      selectedKind = null;
      invoice = null;
      discounted = 0;
    }
  }

  void OnAmountChanged(ChangeEventArgs e)
  {
    var s = e?.Value?.ToString() ?? string.Empty;
    if (double.TryParse(s, out var v))
    {
      amount = v;
      if (invoice is not null)
      {
        ApplyDiscount();
      }
    }
  }

  void ApplyDiscount()
  {
    if (invoice is null) return;
    discounted = invoice.GetInvoiceDiscount(amount);
  }

  void Reset()
  {
    invoice = null;
    amount = 10000;
    discounted = 0;
  }
}